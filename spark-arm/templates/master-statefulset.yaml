apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "spark-arm.fullname" . }}-master
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "spark-arm.labels" . | nindent 4 }}
    app.kubernetes.io/component: master
spec:
  serviceName: {{ include "spark-arm.fullname" . }}-master
  replicas: 1
  selector:
    matchLabels:
      {{- include "spark-arm.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: master
  template:
    metadata:
      labels:
        {{- include "spark-arm.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: master
    spec:
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ include "spark-arm.serviceAccountName" . }}
      {{- end }}
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
        - name: spark-logs
          persistentVolumeClaim:
            claimName: {{ include "spark-arm.fullname" . }}-logs
      containers:
        - name: spark
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/opt/spark/bin/spark-class"]
          args: ["org.apache.spark.deploy.master.Master"]
          env:
            - name: SPARK_HOME
              value: /opt/spark
            - name: SPARK_NODE_TYPE
              value: "master"
            - name: SPARK_LOCAL_HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: SPARK_PUBLIC_DNS
              value: {{ include "spark-arm.fullname" . }}-master
            - name: SPARK_DAEMON_JAVA_OPTS
              value: >-
                -Dspark.deploy.recoveryMode=NONE 
                -Dspark.master.rest.enabled=false
                {{- if .Values.minio.enabled }}
                -Dspark.hadoop.fs.s3a.access.key=$(MINIO_ACCESS_KEY)
                -Dspark.hadoop.fs.s3a.secret.key=$(MINIO_SECRET_KEY)
                {{- end }}
                {{- if .Values.hive.enabled }}
                {{- range $key, $value := .Values.hive.spark.hadoop }}
                -D{{ $key }}={{ $value | quote }}
                {{- end }}
                {{- end }}
                {{- if .Values.delta.enabled }}
                {{- range $key, $value := .Values.delta.spark.hadoop }}
                -D{{ $key }}={{ $value | quote }}
                {{- end }}
                {{- end }}
            {{- if .Values.minio.enabled }}
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "spark-arm.fullname" . }}-minio-credentials
                  key: accessKey
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "spark-arm.fullname" . }}-minio-credentials
                  key: secretKey
            {{- end }}
            {{- if .Values.hive.enabled }}
            - name: POSTGRES_HOST
              value: "{{ .Values.postgres.host }}"
            - name: POSTGRES_PORT
              value: "{{ .Values.postgres.port }}"
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: spark-arm-postgres
                  key: database
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: spark-arm-postgres
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: spark-arm-postgres
                  key: password
            - name: HIVE_METASTORE_HOST
              value: {{ .Values.hive.metastore.host | quote }}
            {{- end }}
            - name: SPARK_MASTER_HOST
              value: "0.0.0.0"
            - name: SPARK_MASTER_PORT
              value: "7077"
            - name: SPARK_MASTER_WEBUI_PORT
              value: "8080"
          ports:
            - containerPort: {{ .Values.service.port }}
              name: spark
            - containerPort: {{ .Values.service.uiPort }}
              name: webui
          volumeMounts:
            - name: spark-logs
              mountPath: /opt/spark/logs
          resources:
            {{- toYaml .Values.master.resources | nindent 12 }}
          startupProbe:
            tcpSocket:
              port: webui
            initialDelaySeconds: 5
            periodSeconds: 3
            failureThreshold: 30
            timeoutSeconds: 2
          livenessProbe:
            tcpSocket:
              port: webui
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          readinessProbe:
            tcpSocket:
              port: webui
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
