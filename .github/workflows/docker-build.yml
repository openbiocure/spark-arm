name: Build and Push ARM64 Docker Image

on:
  push:
    branches:
      - 'stable'
      - 'main'
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'stable'
      - 'main'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read version from tag file
        id: version
        run: echo "VERSION=$(cat tag)" >> $GITHUB_ENV

      - name: Read versions.env and set build args
        id: build-args
        run: |
          # First source the env file to get variables
          set -a; . docker/versions.env; set +a
          # Then create build args with expanded variables, skipping empty lines
          echo "args=$(cat docker/versions.env | grep -v '^#' | grep -v '^$' | while IFS='=' read -r key val; do echo "--build-arg $key=$(eval echo $val)"; done | tr '\n' ' ')" >> $GITHUB_OUTPUT

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=stable
            type=raw,value=latest
            type=raw,value=${{ env.VERSION }}
            type=raw,value=arm64-${{ env.VERSION }}
            type=sha,format=short,enable=${{ github.event_name == 'pull_request' && 'true' || 'false' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: ${{ steps.build-args.outputs.args }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true 